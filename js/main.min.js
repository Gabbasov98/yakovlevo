new NativejsSelect({
    selector: '.m-select select',
});

let selects = document.querySelectorAll(".m-select")
if(selects){
    selects.forEach(select => {
        let form = select.closest("form")
        let selectOptions = form.querySelectorAll(".nativejs-select__option")
        let selectValue = form.querySelectorAll(".nativejs-select__placeholder-value")
        if(form){
            let resetBtn = form.querySelector("button[type='reset']")
            if(resetBtn){
                resetBtn.onclick = function () {
                    selectOptions.forEach(option => {
                        option.setAttribute("data-selected",false)
                    })
                    selectValue.forEach(value => {
                        console.log(select.getAttribute("data-placeholder"))
                        value.innerHTML = select.querySelector("select").getAttribute("data-placeholder")
                    })
                }
            }
        }
    })
}


let tabGroups = document.querySelectorAll("._tabs-parent")

tabGroups.forEach(tabGroup => {
    let tabs = tabGroup.querySelectorAll("._tab")
    let contents = tabGroup.querySelectorAll(".tab-content")

    tabs.forEach(tab => {
        tab.onclick = function(){
            let tabId = tab.getAttribute("data-tab")
            tabs.forEach(tab => {
                tab.classList.remove("_active")
            })
            contents.forEach(content => {
                content.classList.remove("_active")
            })
            tab.classList.add("_active")
            tabGroup.querySelector(`.${tabId}`).classList.add("_active")
        }
    })
})

function setLabelPlace(){
    let fields = document.querySelectorAll(".fg input")

    fields.forEach(field => {
        setLabelPosition(field)

        field.onchange = ()=> {
            setLabelPosition(field)
        }

        function setLabelPosition() {
            if(field.value !== ""){
                field.classList.add("_filled")
            } else{
                field.classList.remove("_filled")
            }
        }
    })
}


setLabelPlace()

let burger = document.querySelector(".burger")
let body = document.querySelector("body")
let header = document.querySelector(".header")

if (burger) {
    burger.onclick = function() {
        header.classList.toggle("_open")
        body.classList.toggle("fixed-body")
    }

    document.addEventListener( 'click', (e) => {
        const withinBoundaries = e.composedPath().includes(header);

        if ( ! withinBoundaries ) {
            header.classList.remove("_open")
            body.classList.remove("fixed-body")
        }
    })
}



function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 16,
            loop: true,
            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
        })
    })
}

function collectionSliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".collection-slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)

        SlidersArray[index] = new Swiper(`.collection-slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            // loop: true,
            navigation: {
                nextEl: `.collection-slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.collection-slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
        })
    })
}

function mainSlider() {
    var swiper = new Swiper('.main-slider .swiper-container', {
        slidesPerView: 1,
        spaceBetween: 20,
        pagination: {
            el: '.main-slider .swiper-pagination',
            type: 'bullets',
            clickable: true,
        },
    })
}

function flatSlider() {
    var swiper = new Swiper('.flat-slider .swiper-container', {
        slidesPerView: 1,
        spaceBetween: 10,
    })

    swiper.on('slideChange', function () {
        setActiveTab(swiper.activeIndex)
    });

    let flatTabs = document.querySelectorAll(".tab")

    flatTabs.forEach(tab => {
        tab.onclick = function () {
            let id = tab.getAttribute("data-tab")
            setActiveTab(id)
            swiper.slideTo(+id)
        }
    })

    function setActiveTab(id) {
        flatTabs.forEach(tab => {
            tab.classList.remove("_active")
        })
        document.querySelector(`.flat-slider .tab[data-tab="${id}"]`).classList.add("_active")
    }
}

Sliders()
collectionSliders()
mainSlider()
flatSlider()

let toggleBlocks = document.querySelectorAll(".slideToggle-block")
toggleBlocks.forEach((el, i) => {
    el.setAttribute("data-id", i + 1)
    let id = el.getAttribute("data-id")
    let toggleElement = document.querySelector(`[data-id="${id}"] > .slideToggle-block__show`)
    let animatedBlock = document.querySelector(`[data-id="${id}"] > .slideToggle-block__hidden`)
    let contentBlock = document.querySelector(`[data-id="${id}"] > .slideToggle-block__hidden > .slideToggle-block__wrap`)
    let contentBlockHeight = contentBlock.getBoundingClientRect().height
    toggleElement.onclick = function() {
        if (el.classList.contains("slideToggle-block--active")) {
            el.classList.remove("slideToggle-block--active")
            animatedBlock.style.height = `0px`
        } else {
            el.classList.add("slideToggle-block--active")
            animatedBlock.style.height = `${contentBlockHeight}px`
            setToggleBlocksHeight()
        }
    }
});

window.onresize = function() {
    setToggleBlocksHeight()
}

setToggleBlocksHeight()

function setToggleBlocksHeight() {
    if(toggleBlocks.length===0){
        return
    }
    let activeToggleBlocks = document.querySelectorAll(".slideToggle-block--active")

    activeToggleBlocks.forEach(el => {
        let id = el.getAttribute("data-id")
        let animatedBlock = document.querySelector(`[data-id="${id}"] > .slideToggle-block__hidden`)
        let contentBlock = document.querySelector(`[data-id="${id}"] > .slideToggle-block__hidden > .slideToggle-block__wrap`)
        let contentBlockHeight = contentBlock.getBoundingClientRect().height
        animatedBlock.style.height = `${contentBlockHeight}px`
    });
}

let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        let modal = document.querySelector(`#${modalId}`)
        let closeButtons = modal.querySelectorAll(`._close-modal`)

        modal.classList.add("_active")
        body.classList.add("fixed-body2")

        console.log(closeButtons)

        closeButtons.forEach(btn => {
            btn.onclick = ()=> {
                modal.classList.remove("_active")
                body.classList.remove("fixed-body2")
            }
        })
    }
})



var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


let flatsCatalog = document.querySelector(".flats-catalog")
let viewButtons = document.querySelectorAll(".view__btn")


if(flatsCatalog){
    viewButtons.forEach(btn => {
        btn.onclick = function () {
            localStorage.setItem("productView", btn.getAttribute("data-view"));
            setCatalogView()
        }
    })

    setCatalogView()

    function setCatalogView() {
        if(localStorage.getItem("productView") === "table"){
            flatsCatalog.classList.add("_table-view")
        } else{
            flatsCatalog.classList.remove("_table-view")
        }
    }
}


let sortItems = document.querySelectorAll(".sort-item")
let sortInput = document.querySelector("._sort-input")

sortItems.forEach((sortItem,index) => {
    sortItem.onclick = function () {
        let value = ""
        let btnName = sortItem.getAttribute("data-name")
        console.log(btnName)

        sortItems.forEach((sortItem,i) => {
            if(i === index){
                return
            }
            sortItem.classList.remove("_asc")
            sortItem.classList.remove("_desc")
        })


        if(sortItem.classList.contains("_desc")){
            sortItem.classList.remove("_desc")
            sortItem.classList.remove("_asc")
            sortInput.value = ""
            return;
        }
        if(sortItem.classList.contains("_asc")){
            sortItem.classList.remove("_asc")
            sortItem.classList.add("_desc")
            sortInput.value = `${btnName}_desc`
            return;
        }

        if (!sortItem.classList.contains("_desc") && !sortItem.classList.contains("_asc")){
            sortItem.classList.add("_asc")
            sortInput.value = `${btnName}_asc`
            return;
        }
    }
})


function digits_int(target){
    let val = target.value.replace(/[^0-9]/g, '');
    let min = +target.getAttribute("min")
    let max = +target.getAttribute("max")


    if(val){
        if (+val < min) {
            val = min
            val = replaceNumericInputs(val)
            target.value = val
            return
        }
        if (+val > max) {
            val = max
            val = replaceNumericInputs(val)
            target.value = val
            return
        }
    }

    target.value = replaceNumericInputs(val)
}

let numberInputs = document.querySelectorAll("._num-input")
let filterNumberInputs = document.querySelectorAll(".filter ._num-input")
numberInputs.forEach(input => {
    digits_int(input)
})
filterNumberInputs.forEach(input => {
    input.oninput = function () {
        digits_int(input)
    }
})


function replaceNumericInputs(val) {
    return val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')
}

let mortgageForm = document.querySelector(".mortgage-calc")

if(mortgageForm){
    let creditSumField = mortgageForm.querySelector("input[name='credit-sum']")
    let firstPayField = mortgageForm.querySelector("input[name='first-pay']")
    let creditDurationField = mortgageForm.querySelector("input[name='duration']")

    let creditSum = +creditSumField.value.replace(/\s/g, '')
    firstPayField.setAttribute("min",creditSum * 0.1)
    firstPayField.setAttribute("max",creditSum * 0.95)
    firstPayField.value = creditSum * 0.1

    let sumOutput = mortgageForm.querySelector("._credit-sum-output")
    let monthSumOutput = mortgageForm.querySelector("._month-sum-output")

    digits_int(firstPayField)
    calcMortgage()

    firstPayField.onchange = function () {
        digits_int(this)
        calcMortgage()
    }
    creditDurationField.onchange = function () {
        digits_int(this)
        calcMortgage()
    }
    function calcMortgage() {
        let firstPay = +firstPayField.value.replace(/\s/g, '')
        let duration = +creditDurationField.value.replace(/\s/g, '')

        console.log(firstPay)
        console.log(duration)

        if(firstPay > 0 && duration > 0){
            let durationMonth = duration * 12

            let yearRate = 10.69
            let monthRate = yearRate / 12 / 100
            let generalRate = (1 + monthRate)**durationMonth

            let sum = (creditSum * monthRate * generalRate) / (generalRate - 1)

            sumOutput.innerHTML = replaceNumericInputs((creditSum - firstPay).toFixed(0))
            monthSumOutput.innerHTML = replaceNumericInputs(sum.toFixed(0))
            mortgageForm.classList.add("_calculated")
        }


    }
}





function initFlats(map_points){
    map_points.forEach(point => {
        let flats = ``
        let planHtml = document.querySelector(".plan")



        point.flats.forEach(flat => {
            let price = ``
            if(flat.price > 0){
                price = `
            <span class="text16 dark-text">
                от ${(Math.abs(Number(flat.price)) / 1.0e+6).toFixed(1)} млн. ₽
            </span>
            `
            } else{
                price = `
            <span class="text16 gray-text">
                Нет в наличии
            </span>
            `
            }
            flats += `
        <a href="${flat.link}" class="room">
            <div class="text16 medium-text">
                ${flat.name}
            </div>
            <div class="room__right">
                ${price}
                <button class="room__btn">
                    <img src="img/btn.svg" alt="">
                </button>
            </div>
        </a>

        `
        })

        planHtml.innerHTML += `
    <div class="plan-modal" data-num="${point.corpus_id}">
        <div class="plan-modal__wrap">
            <div class="plan-modal__top">
                <div class="text40 medium-text">
                    Корпус ${point.corpus_id}
                </div>
                <button class="plan-modal__close">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18.6667 8L20 9.33333L9.33333 20L8 18.6667L18.6667 8Z" fill="#A7A9AC"/>
                        <path d="M20 18.6667L18.6667 20L8 9.33333L9.33333 8L20 18.6667Z" fill="#A7A9AC"/>
                    </svg>
                </button>
            </div>
            <div class="plan-modal__items">
                ${flats}
            </div>
            <div class="plan-modal__bottom">
                <a href="" class="plan-modal__btn m-btn m-btn-primary">
                    ${point.flats_count} квартиры
                </a>
            </div>
        </div>
        <div class="plan-modal__bg"></div>
    </div>
    `
    })

    let planPoints = document.querySelectorAll(".plan-point")
    let planLights = document.querySelectorAll(".plan__lighting path")
    let planModals = document.querySelectorAll(".plan-modal")

    if(planPoints){
        planPoints.forEach(point => {
            point.onmouseover = function () {
                let num = point.getAttribute("data-num")

                planLights.forEach(light => {
                    let lightNum = light.getAttribute("data-num")
                    light.classList.remove("_active")
                    if(num === lightNum){
                        light.classList.add("_active")
                    }
                })
            }
            point.onclick = function () {
                let num = point.getAttribute("data-num")
                if(num === "school"){
                    return
                }
                console.log(document.querySelector(`.plan-modal[data-num="${num}"]`))
                document.querySelector(`.plan-modal[data-num="${num}"]`).classList.add("_active")


            }
        })

        planModals.forEach(modal => {
            let closeBtn = modal.querySelector(".plan-modal__close")
            let closeBg = modal.querySelector(".plan-modal__bg")

            closeBtn.onclick = function(){
                closeModal(modal)
            }
            closeBg.onclick = function(){
                closeModal(modal)
            }
        })

        function closeModal(modal) {
            planLights.forEach(light => {
                modal.classList.remove("_active")
                light.classList.remove("_active")
            })
        }
    }
}



let patternPhone = /^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/
let reqForm = document.querySelector("#req-form")

if(reqForm){
    let reqModal = document.querySelector("#reqModal")
    let phoneField = reqForm.querySelector("input[name='phone']")
    let confirmField = reqForm.querySelector("input[name='user_confirm']")
    let submitBtn = reqForm.querySelector(".req-form__btn")
    let phoneFieldFilled = false
    phoneField.onchange = function () {
        setLabelPlace()
        validatePhoneField(this)
    }
    phoneField.onblur = function () {
        setLabelPlace()
        validatePhoneField(this)
    }


    confirmField.onchange = function () {
        checkFormFilled()
    }

    function checkFormFilled() {
        if(confirmField.checked && phoneFieldFilled)
        {
            submitBtn.disabled = false
        } else{
            submitBtn.disabled = true
        }
    }

    function validatePhoneField(field) {
        let value = field.value
        if(value.replace(/\s+/g, '') === ""){
            field.classList.add("_not-filled")
            return false
        } else{
            field.classList.remove("_not-filled")
        }

        if (!isCorrectPattern(field,patternPhone)){
            field.classList.add("_not-correct")
            return false
        } else{
            field.classList.remove("_not-correct")
        }
        phoneFieldFilled = true
        checkFormFilled()
        return true
    }

    submitBtn.onclick = function () {
        reqModal.classList.add("_success")
    }
}




function isCorrectPattern(input,pattern) {
    if(!pattern.test(input.value)){
        return false
    }else{
        return true
    }
}

window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()


})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
